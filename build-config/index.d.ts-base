// Queries
//

export type CSSSelectorString = string
export type TPattern = string | RegExp
export type TViddyQuery = TPattern | TViddyOpts | TViddyQueryTuple
export type TViddyQueryTuple = [TPattern, TViddyOpts]

export type TViddyPattern = {
  pattern: TPattern
}

export type TViddySelector = {
  selector: CSSSelectorString
}

export type TViddyOpts = (TViddyPattern | TViddySelector) & {
  pickParent?: CSSSelectorString
  near?: TViddyQuery
  above?: TViddyQuery
  below?: TViddyQuery
  leftOf?: TViddyQuery
  rightOf?: TViddyQuery
  containedBy?: TViddyQuery
  withinMs?: number
  timeoutInMs?: number
}

// Function signatures
//

type TQueryMethod<TReturn> = (
  pattern: TViddyQuery,
  opts?: TViddyOpts
) => TReturn

type TQueryMatchMethod<TReturn> = (
  needle: TPattern,
  pattern: TViddyQuery,
  opts?: TViddyOpts
) => TReturn

type TQueryValueMethod<TReturn> = (
  value: TPattern,
  pattern: TViddyQuery,
  opts?: TViddyOpts
) => TReturn

// Monadic return
//

type TNothing<T = void> = {
  valueOf: () => T
  exists: () => TNothing<T>
  absent:<U = unknown> (f: () => U) => TJust<U>
}

type TJust<T = string> = {
  valueOf: () => T
  exists:<U = unknown> (f: (x: T) => U) => TJust<U>
  absent: () => TJust<T>
}

type TMonadicReturn<T, U> = TJust<T> | TNothing<U>

// APIs
//

export type TViddyApi = {
  for: TQueryMethod<CSSSelectorString | undefined>
  forCta: TQueryMethod<CSSSelectorString | undefined>
  forInput: TQueryMethod<CSSSelectorString | undefined>

  when: TQueryMethod<TMonadicReturn<CSSSelectorString, void>>
  whenCta: TQueryMethod<TMonadicReturn<CSSSelectorString, void>>
  whenInput: TQueryMethod<TMonadicReturn<CSSSelectorString, void>>

  waitFor: TQueryMethod<Promise<CSSSelectorString>>
  waitForCta: TQueryMethod<Promise<CSSSelectorString>>
  waitForValue: TQueryValueMethod<Promise<CSSSelectorString>>
  waitForDomToIdle: TQueryMethod<Promise<any>>

  valueOf: TQueryMethod<any>
  innerText: TQueryMethod<string | undefined>
  matchText: TQueryMatchMethod<string | undefined>
  hasContent: TQueryMethod<boolean>
}

export type TViddyWellApi = {
  for: TQueryMethod<CSSSelectorString[]>
  forCta: TQueryMethod<CSSSelectorString[]>
  forInput: TQueryMethod<CSSSelectorString[]>

  waitFor: TQueryMethod<Promise<CSSSelectorString[]>>
  waitForCta: TQueryMethod<Promise<CSSSelectorString[]>>
  waitForValue: TQueryValueMethod<Promise<CSSSelectorString[]>>
  waitForDomToIdle: TQueryMethod<Promise<any>>

  valueOf: TQueryMethod<any[]>
  innerText: TQueryMethod<string[]>
  matchText: TQueryMatchMethod<string[]>
  hasContent: TQueryMethod<boolean>
}

declare module 'viddy' {
  export function serialize(...args: any[]): string
  export function unserialize(argStr: string): any
  export function qsArray(selector: string): Element[]
  export function selectorOfElement(element: Element): string | void

  export const ViddyError: Error
  export const viddy: TViddyApi
  export const viddyWell: TViddyWellApi
}

export type TViddyInApi = {
  for: TQueryMethod<Promise<CSSSelectorString>>
  forCta: TQueryMethod<Promise<CSSSelectorString>>
  forInput: TQueryValueMethod<Promise<CSSSelectorString>>

  when: TQueryMethod<Promise<TMonadicReturn<CSSSelectorString, void>>>
  whenCta: TQueryMethod<Promise<TMonadicReturn<CSSSelectorString, void>>>
  whenInput: TQueryMethod<Promise<TMonadicReturn<CSSSelectorString, void>>>

  waitFor: TQueryMethod<Promise<CSSSelectorString>>
  waitForCta: TQueryMethod<Promise<CSSSelectorString>>
  waitForValue: TQueryValueMethod<Promise<CSSSelectorString>>
  waitForDomToIdle: TQueryMethod<Promise<any>>

  valueOf: TQueryMethod<Promise<any>>
  innerText: TQueryMethod<Promise<string>>
  matchText: TQueryMatchMethod<Promise<string>>
  hasContent: TQueryMethod<boolean>
}

export type TViddyWellInApi = {
  for: TQueryMethod<Promise<CSSSelectorString[]>>
  forCta: TQueryMethod<Promise<CSSSelectorString[]>>
  forInput: TQueryValueMethod<Promise<CSSSelectorString[]>>

  waitFor: TQueryMethod<Promise<CSSSelectorString[]>>
  waitForCta: TQueryMethod<Promise<CSSSelectorString[]>>
  waitForValue: TQueryValueMethod<Promise<CSSSelectorString[]>>
  waitForDomToIdle: TQueryMethod<Promise<any>>

  valueOf: TQueryMethod<Promise<any>>
  innerText: TQueryMethod<Promise<string[]>>
  matchText: TQueryMatchMethod<Promise<string[]>>
  hasContent: TQueryMethod<boolean>
}

declare module 'viddy/puppeteer' {
  export function viddyIn(page: Object): TViddyInApi
  export function viddyWellIn(page: Object): TViddyWellInApi
}
